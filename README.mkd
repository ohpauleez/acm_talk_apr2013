A Clojure Walk-through - a talk for PSU ACM
============================================
Code follows the core practices of The Art of Readable Code and The Practice of Programming


A General Overview
-------------------


Requirements
------------


Usage and Examples
------------------


Hacking
=======

Interactive development
------------------------

### Using the Clojure REPL

More to come, but: `lein repl`

Working with Clojure
--------------------
### Fireplace.vim tips

Start a repl that vim will connect to:

    lein repl

Use vim to open a Clojure file: `vim somefile.clj`

 * yab - "Yank all block" copy all code between two parens, including the parens
 * cib - "Change in block" delete the code between two parens and go into insert mode
 * dib - "Delete in block" delete the code between two parens
 * dab - "Delete all block" delete the code betweens two parens, including the parens
 * You can substitute `[`, `{`, or any specific marker for `b` above.
   * `ci[` - Change in a vector
   * `da{` - Delete an entire map
 * ctrl+w ctrl+o - "Only this Window" closes all windows except your current one
   * good for getting rid of the stacktrace window
   * also `:lcl` - close location-window
   * `:ccl` - close quickfix window

Here are helpful Fireplace commands

 * `cpp` - eval paragraph // eval innermost-level form - "compile paragraph"
   * `cpab` - eval current level form - "compile all block"
 * `cqp` - eval an entered statement within the namespace; useful for `(run-tests)`
 * `cmm` and `c1m` - macroexpand and macroexpand-1
 * `c!!` - replace current form with eval'd epression result
 * `gf`  - goto file, if your cursor is over a name in the ns
   * `ctrl+w gf` - in a new window/tab, goto file
   * `ctrl+w f` - in a new split, goto file
   * `ctrl-o` - jump back to the previous location (useful when jumping between files)
 * `[d`  - look at the source/definition of symbol under cursor
 * `[ ctrl+d`  - goto definition in current buffer
   * `ctrl+w gd` - in a new window/tab, goto definition
   * `ctrl+w d` - in a new split, goto definition
 * `K`   - Look at doc string
 * `cpr` - require the file and run any tests present
 * the `:make` command is aliased to `lein`, so `:make test` works
 * `:A` - jump between the source and test file (In later versions, this requires [leiningen.vim](https://github.com/tpope/vim-leiningen))
   * `:AT` - in a new tab, `:AV` - in a vertical split
 * *Enter/Return* within the location-window stacktrace will jump to that source line
 * Omnicompletion in *INSERT* mode: `ctrl-x ctrl-o`
 * `:RunTests!` - Run all tests in all namespaces

### Paredit.vim tips

I also make use of the paredit.vim file from the slimv.vim plugin. This assumes your `<leader>` is `\`

 * `:call PareditToggle()` - toggle it on and off.
 * `\W` wrap in paren (works with visual selection too)
 * `\J` join paren - (a)(b) -> (a b)
 * `\O` split paren - (a b) -> (a)(b)
 * `\S` splice paren - ((a b)) -> (a b)
 * `\<` move left - moves parens around blocks (a)|(b) -> ((a) b)
 * `\>` move right - moves parens around blocks (a|)(b) -> (a (b))

Wrapping can also be tailored, and used on a visual block:

 * `\w"`
 * `\w[`
 * `\w(`
 * `\w{`

### Surround.vim tips

Surround let's you change surrounding characters, which is helpful in all languages.

 * `cs"'` - change surrounding " to '  ... this will work for any two characters
 * `ds[` - delete surrounding \[


### Using emacs

 * Take a look at [Emacs Live](https://github.com/overtone/emacs-live)
 * See the [cheat sheet](./emacs-cheat-sheet.mkd)


### Using Eclipse

 * Take a look at [CounterClockwise plugin](http://code.google.com/p/counterclockwise/)

### Using IntelliJ

 * Take a look at [Cursive Clojure](https://cursiveclojure.com/)

### Other editor options

 * [LightTable](http://www.lighttable.com/)


Packages used and links
-----------------------

### Clojure

 * [Leiningen](https://github.com/technomancy/leiningen) - Clojure project tool
 * [Planet Clojure](http://clojure.in/) - Clojure news
 * [ClojureDocs](http://clojuredocs.org/quickref/Clojure%20Core) - Clojure API lookup/search + examples
 * [Clojure Documentation Project](http://clojure-doc.org/) - Guides, tutorials, etc.
 * [Clojure Cheatsheet](http://jafingerhut.github.io/cheatsheet-clj-1.3/cheatsheet-tiptip-cdocs-summary.html)
 * [ClojureSphere](http://www.clojuresphere.com/) - Popularity and dependency graph information for Clojure libraries.  Useful for finding libraries.
 * [Clojure Toolbox](http://www.clojure-toolbox.com/) - a topical list of Clojure libraries
 * [ClojureWerkz](http://clojurewerkz.org/) - a collection of Clojure libraries all in the same style and with the same doc structure
 * [4Clojure](http://www.4clojure.com/problems) - Clojure practice problems to learn the language
 * [Clojars](https://clojars.org/) - open source community-driven package (Maven) repository
 * [Maven Central Search](http://search.maven.org/) - central repository for some JVM projects

License
-------
Copyright Â© 2013 Paul deGrandis

Distributed under the Eclipse Public License, the same as Clojure.

